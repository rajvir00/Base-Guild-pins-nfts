// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract EmployeeStorage {
    // --- State Variables ---

    // Private: small numbers (packing possible)
    // shares: range small enough for uint16
    uint16 private shares;      // up to 5000
    uint32 private salary;      // up to 1,000,000 (fits in 32 bits)

    // Public: larger data types
    string public name;         // dynamic type (stored separately)
    uint256 public idNumber;    // can be any large unique number

    // --- Custom Error ---
    error TooManyShares(uint256 totalShares);

    // --- Constructor ---
    constructor() {
        shares = 1000;
        name = "Pat";
        salary = 50000;
        idNumber = 112358132134;
    }

    // --- View Functions ---
    function viewSalary() public view returns (uint) {
        return salary;
    }

    function viewShares() public view returns (uint) {
        return shares;
    }

    // --- Grant Shares ---
    function grantShares(uint _newShares) public {
        // Revert if _newShares itself > 5000
        if (_newShares > 5000) {
            revert("Too many shares");
        }

        uint256 newTotal = shares + _newShares;

        // Revert if total exceeds 5000
        if (newTotal > 5000) {
            revert TooManyShares(newTotal);
        }

        shares = uint16(newTotal);
    }

    /**
    * Do not modify this function.  It is used to enable the unit test for this pin
    * to check whether or not you have configured your storage variables to make
    * use of packing.
    */
    function checkForPacking(uint _slot) public view returns (uint r) {
        assembly {
            r := sload(_slot)
        }
    }

    /**
    * Warning: Anyone can use this function at any time!
    */
    function debugResetShares() public {
        shares = 1000;
    }
}
